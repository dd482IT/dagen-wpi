defaultSchema: drugs
generateUnqualifiedNamesForSchemas: ["drugs"]
querySpecs:

  # Query for a single drug with only a subset of native fields (no parent or child tables involved).
  - queryName: drug fields query with param
    resultRepresentations: [JSON_OBJECT_ROWS, MULTI_COLUMN_ROWS]
    generateResultTypes: true
    tableJson:
      table: drug
      fieldExpressions:
        - id
        - name
        - mesh_id
      recordCondition:
         sql: "$$.id = :id"
         paramNames: ["id"]

  - queryName: drug fields query with other cond
    resultRepresentations: [JSON_OBJECT_ROWS, MULTI_COLUMN_ROWS]
    generateResultTypes: true
    tableJson:
      table: drug
      fieldExpressions: [id, {field: name, jsonProperty: myName}, mesh_id]
      recordCondition:
        sql: '$$.id = :idMinusOne + 1'
        paramNames: ['idMinusOne']

  # Like the above but with an additional field with a customized type provided here.
  - queryName: drug fields customized type query
    resultRepresentations: [JSON_OBJECT_ROWS]
    generateResultTypes: true
    typesFileHeader: "import java.math.BigDecimal;"
    tableJson:
      table: drug
      fieldExpressions:
        - field: id
        - field: cid
          fieldTypeInGeneratedSource: "@Nullable BigDecimal"
      recordCondition:
         sql: "$$.id = :id"
         paramNames: ["id"]

  - queryName: drug with field expression query
    resultRepresentations: [JSON_OBJECT_ROWS]
    generateResultTypes: true
    tableJson:
      table: drug
      fieldExpressions:
        - field: id
        - expression: "$d.cid + 1000"
          withTableAliasAs: $d # custom table alias used in expression
          jsonProperty: cidPlus1000
          fieldTypeInGeneratedSource: "@Nullable Integer"
      recordCondition:
         sql: "$$.id = :id"
         paramNames: ["id"]

  # Drug with brands child collection.
  - queryName: drug with brands query
    resultRepresentations: [JSON_OBJECT_ROWS]
    generateResultTypes: true
    tableJson:
      table: drug
      fieldExpressions:
        - field: id
        - field: name
      childTableCollections:
        - collectionName: brands
          tableJson:
            table: brand
            fieldExpressions:
              - field: brand_name
              - field: manufacturer_id
      recordCondition:
         sql: "$$.id = :id"
         paramNames: ["id"]

  # drug with brands via custom join condition
  - queryName: drug with brands custom join query
    resultRepresentations: [JSON_OBJECT_ROWS]
    generateResultTypes: true
    tableJson:
      table: drug
      fieldExpressions:
        - field: id
        - field: name
      childTableCollections:
        - collectionName: brands
          customJoinCondition:
            equatedFields:
              - childField: drug_id
                parentPrimaryKeyField: id
          tableJson:
            table: brand
            fieldExpressions:
              - field: brand_name
              - field: manufacturer_id
      recordCondition:
         sql: "$$.id = :id"
         paramNames: ["id"]

  # drug with brands and advisories
  - queryName: drug with brands and advisories query
    resultRepresentations: [JSON_OBJECT_ROWS]
    generateResultTypes: true
    tableJson:
      table: drug
      fieldExpressions:
        - field: id
        - field: name
      childTableCollections:
        - collectionName: brands
          tableJson:
            table: brand
            fieldExpressions:
              - field: brand_name
              - field: manufacturer_id
        - collectionName: advisories
          tableJson:
            table: advisory
            fieldExpressions:
              - field: text
                jsonProperty: advisoryText
      recordCondition:
         sql: "$$.id = :id"
         paramNames: ["id"]

  # drug with unwrapped advisory ids
  - queryName: drug with unwrapped advisory ids query
    resultRepresentations: [JSON_OBJECT_ROWS]
    generateResultTypes: true
    tableJson:
      table: drug
      fieldExpressions:
        - field: id
        - field: name
      childTableCollections:
        - collectionName: advisoryIds
          unwrap: true
          tableJson:
            table: advisory
            fieldExpressions:
              - field: id
      recordCondition:
         sql: "$$.id = :id"
         paramNames: ["id"]

  # drug with unwrapped advisory texts
  - queryName: drug with unwrapped advisory texts query
    resultRepresentations: [JSON_OBJECT_ROWS]
    generateResultTypes: true
    tableJson:
      table: drug
      fieldExpressions:
        - field: id
        - field: name
      childTableCollections:
        - collectionName: advisoryTexts
          unwrap: true
          tableJson:
            table: advisory
            fieldExpressions:
              - field: text
      recordCondition:
         sql: "$$.id = :id"
         paramNames: ["id"]

  # drug with unwrapped advisory type names
  - queryName: drug with unwrapped advisory type names query
    resultRepresentations: [JSON_OBJECT_ROWS]
    generateResultTypes: true
    tableJson:
      table: drug
      fieldExpressions:
        - field: id
        - field: name
      childTableCollections:
        - collectionName: advisoryTypeNames
          unwrap: true
          tableJson:
            table: advisory
            parentTables:
              - tableJson:
                  table: advisory_type
                  fieldExpressions:
                    - field: name
      recordCondition:
         sql: "$$.id = :id"
         paramNames: ["id"]

  # Inline parent query, where parent's fields are included inline in the child table.
  - queryName: advisory with inline advisory type query
    resultRepresentations: [JSON_OBJECT_ROWS]
    generateResultTypes: true
    tableJson:
      table: advisory
      fieldExpressions:
        - field: id
        - field: drug_id
        - field: text
      parentTables:
        - tableJson:
            table: advisory_type
            fieldExpressions:
              - field: name
                jsonProperty: advisoryType
              - expression: "(select 1 + 1)"
                jsonProperty: exprYieldingTwo
                fieldTypeInGeneratedSource: long
      recordCondition:
         sql: "$$.id = :id"
         paramNames: ["id"]

  # Inline parent query with custom join condition.
  - queryName: advisory with inline custom joined advisory type query
    resultRepresentations: [JSON_OBJECT_ROWS]
    generateResultTypes: true
    tableJson:
      table: advisory
      fieldExpressions:
        - field: id
        - field: drug_id
        - field: text
      parentTables:
        - tableJson:
            table: advisory_type
            fieldExpressions:
              - field: name
                jsonProperty: advisoryType
              - expression: "(select 1 + 1)"
                jsonProperty: exprYieldingTwo
                fieldTypeInGeneratedSource: long
          customJoinCondition:
            equatedFields:
              - childField: advisory_type_id
                parentPrimaryKeyField: id
      recordCondition:
         sql: "$$.id = :id"
         paramNames: ["id"]

  # Referenced (wrapped) parent query, where parent is available through an object reference.
  - queryName: drug with wrapped analyst query
    resultRepresentations: [JSON_OBJECT_ROWS]
    generateResultTypes: true
    tableJson:
      table: drug
      fieldExpressions:
        - field: id
        - field: name
        - field: mesh_id
      parentTables:
        - referenceName: registeredByAnalyst
          tableJson:
            table: analyst
            fieldExpressions:
              - field: id
              - field: short_name
      recordCondition:
         sql: "$$.id = :id"
         paramNames: ["id"]

  # Referenced (wrapped) parent with custom join condition.
  - queryName: drug with wrapped analyst via custom join query
    resultRepresentations: [JSON_OBJECT_ROWS]
    generateResultTypes: true
    tableJson:
      table: drug
      fieldExpressions:
        - field: id
        - field: name
        - field: mesh_id
      parentTables:
        - referenceName: registeredByAnalyst
          tableJson:
            table: analyst
            fieldExpressions:
              - field: id
              - field: short_name
          customJoinCondition:
            equatedFields:
              - childField: registered_by
                parentPrimaryKeyField: id
      recordCondition:
         sql: "$$.id = :id"
         paramNames: ["id"]

  - queryName: drug with explicit compound reference query
    resultRepresentations: [JSON_OBJECT_ROWS]
    generateResultTypes: true
    tableJson:
      table: drug
      fieldExpressions:
        - field: id
        - field: name
        - field: mesh_id
      parentTables:
        - referenceName: compound
          viaForeignKeyFields:
            - compound_id
          tableJson:
            table: compound
            fieldExpressions:
              - field: display_name
              - field: nctr_isis_id
      recordCondition:
         sql: "$$.id = :id"
         paramNames: ["id"]
