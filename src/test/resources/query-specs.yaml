defaultSchema: drugs
generateUnqualifiedNamesForSchemas: ["drugs"]
querySpecs:

  # Query for a single drug with only a subset of native fields (no parent or child tables involved).
  - queryName: drug fields query with param
    resultsRepresentations: [JSON_OBJECT_ROWS, MULTI_COLUMN_ROWS]
    generateResultTypes: true
    tableJson:
      table: drug
      fieldExpressions:
        - field: id
        - field: name
        - field: mesh_id
      fieldParamConditions:
        - field: id

  - queryName: drug fields query with other cond
    resultsRepresentations: [JSON_OBJECT_ROWS, MULTI_COLUMN_ROWS]
    generateResultTypes: true
    tableJson:
      table: drug
      fieldExpressions:
        - field: id
        - field: name
        - field: mesh_id
      recordCondition:
        sql: '$a$.id = :idMinusOne + 1'
        paramNames: ['idMinusOne']

  # Like the above but with an additional field with a customized type provided here.
  - queryName: drug fields customized type query
    resultsRepresentations: [JSON_OBJECT_ROWS]
    generateResultTypes: true
    tableJson:
      table: drug
      fieldExpressions:
        - field: id
        - field: cid
          generateTypes:
            - language: Java
              typeDeclaration: "@Nullable Integer"
      fieldParamConditions:
        - field: id

  - queryName: drug with field expression query
    resultsRepresentations: [JSON_OBJECT_ROWS]
    generateResultTypes: true
    tableJson:
      table: drug
      fieldExpressions:
        - field: id
        - expression: "$d.cid + 1000"
          withTableAliasAs: $d # custom table alias used in expression
          jsonProperty: cidPlus1000
          generateTypes:
            - language: Java
              typeDeclaration: "@Nullable Integer"
      fieldParamConditions:
        - field: id

  # Drug with brands child collection.
  - queryName: drug with brands query
    resultsRepresentations: [JSON_OBJECT_ROWS]
    generateResultTypes: true
    tableJson:
      table: drug
      fieldExpressions:
        - field: id
        - field: name
      childTableCollections:
        - collectionName: brands
          tableJson:
            table: brand
            fieldExpressions:
              - field: brand_name
              - field: manufacturer_id
      fieldParamConditions:
        - field: id

  # drug with brands via custom join condition
  - queryName: drug with brands custom join query
    resultsRepresentations: [JSON_OBJECT_ROWS]
    generateResultTypes: true
    tableJson:
      table: drug
      fieldExpressions:
        - field: id
        - field: name
      childTableCollections:
        - collectionName: brands
          customJoinCondition:
            withChildAliasAs: $b
            withParentAliasAs: $d
            joinExpression: $b.drug_id = $d.id
          tableJson:
            table: brand
            fieldExpressions:
              - field: brand_name
              - field: manufacturer_id
      fieldParamConditions:
        - field: id

  # drug with brands and advisories
  - queryName: drug with brands and advisories query
    resultsRepresentations: [JSON_OBJECT_ROWS]
    generateResultTypes: true
    tableJson:
      table: drug
      fieldExpressions:
        - field: id
        - field: name
      childTableCollections:
        - collectionName: brands
          tableJson:
            table: brand
            fieldExpressions:
              - field: brand_name
              - field: manufacturer_id
        - collectionName: advisories
          tableJson:
            table: advisory
            fieldExpressions:
              - field: text
                jsonProperty: advisoryText
      fieldParamConditions:
        - field: id

  # drug with unwrapped advisory ids
  - queryName: drug with unwrapped advisory ids query
    resultsRepresentations: [JSON_OBJECT_ROWS]
    generateResultTypes: true
    tableJson:
      table: drug
      fieldExpressions:
        - field: id
        - field: name
      childTableCollections:
        - collectionName: advisoryIds
          unwrap: true
          tableJson:
            table: advisory
            fieldExpressions:
              - field: id
      fieldParamConditions:
        - field: id

  # drug with unwrapped advisory texts
  - queryName: drug with unwrapped advisory texts query
    resultsRepresentations: [JSON_OBJECT_ROWS]
    generateResultTypes: true
    tableJson:
      table: drug
      fieldExpressions:
        - field: id
        - field: name
      childTableCollections:
        - collectionName: advisoryTexts
          unwrap: true
          tableJson:
            table: advisory
            fieldExpressions:
              - field: text
      fieldParamConditions:
        - field: id

  # drug with unwrapped advisory type names
  - queryName: drug with unwrapped advisory type names query
    resultsRepresentations: [JSON_OBJECT_ROWS]
    generateResultTypes: true
    tableJson:
      table: drug
      fieldExpressions:
        - field: id
        - field: name
      childTableCollections:
        - collectionName: advisoryTypeNames
          unwrap: true
          tableJson:
            table: advisory
            inlineParentTables:
              - tableJson:
                  table: advisory_type
                  fieldExpressions:
                    - field: name
      fieldParamConditions:
        - field: id

  # Inline parent query, where parent's fields are included inline in the child table.
  - queryName: advisory with inline advisory type query
    resultsRepresentations: [JSON_OBJECT_ROWS]
    generateResultTypes: true
    tableJson:
      table: advisory
      fieldExpressions:
        - field: id
        - field: drug_id
        - field: text
      inlineParentTables:
        - tableJson:
            table: advisory_type
            fieldExpressions:
              - field: name
                jsonProperty: advisoryType
              - expression: "(select 1 + 1)"
                jsonProperty: exprYieldingTwo
                generateTypes:
                  - language: Java
                    typeDeclaration: long
      fieldParamConditions:
        - field: id

  # Referenced (wrapped) parent query, where parent is available through an object reference.
  - queryName: drug with wrapped analyst query
    resultsRepresentations: [JSON_OBJECT_ROWS]
    generateResultTypes: true
    tableJson:
      table: drug
      fieldExpressions:
        - field: id
        - field: name
        - field: mesh_id
      referencedParentTables:
        - referenceName: registeredByAnalyst
          tableJson:
            table: analyst
            fieldExpressions:
              - field: id
              - field: short_name
      fieldParamConditions:
        - field: id

  - queryName: drug with explicit compound reference query
    resultsRepresentations: [JSON_OBJECT_ROWS]
    generateResultTypes: true
    tableJson:
      table: drug
      fieldExpressions:
        - field: id
        - field: name
        - field: mesh_id
      referencedParentTables:
        - referenceName: compound
          viaForeignKeyFields:
            - compound_id
          tableJson:
            table: compound
            fieldExpressions:
              - field: display_name
              - field: nctr_isis_id
      fieldParamConditions:
        - field: id
