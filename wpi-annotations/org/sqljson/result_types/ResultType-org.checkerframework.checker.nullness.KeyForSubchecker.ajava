package org.sqljson.result_types;

import java.util.*;
import static java.util.Collections.unmodifiableList;
import static java.util.stream.Collectors.toList;
import org.checkerframework.checker.nullness.qual.Nullable;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.KeyForSubchecker")
public class ResultType {

    // always unqualified by module/package
    private final  String typeName;

    private final  List<SimpleTableFieldProperty> simpleTableFieldProperties;

    private final  List<TableExpressionProperty> tableExpressionProperties;

    private final  List<ChildCollectionProperty> childCollectionProperties;

    private final  List<ParentReferenceProperty> parentReferenceProperties;

    // NOTE: Fields from inline parents are included in the above.
    private final   boolean unwrapped;

    ResultType( String typeName,  List<SimpleTableFieldProperty> simpleTableFieldProperties,  List<TableExpressionProperty> tableExpressionProperties,  List<ChildCollectionProperty> childCollectionProperties,  List<ParentReferenceProperty> parentReferenceProperties) {
        this(typeName, simpleTableFieldProperties, tableExpressionProperties, childCollectionProperties, parentReferenceProperties, false);
    }

    ResultType( String typeName,  List<SimpleTableFieldProperty> simpleTableFieldProperties,  List<TableExpressionProperty> tableExpressionProperties,  List<ChildCollectionProperty> childCollectionProperties,  List<ParentReferenceProperty> parentReferenceProperties,   boolean unwrapped) {
        this.typeName = typeName;
        this.simpleTableFieldProperties = unmodifiableList(new ArrayList<>(simpleTableFieldProperties));
        this.tableExpressionProperties = unmodifiableList(new ArrayList<>(tableExpressionProperties));
        this.childCollectionProperties = unmodifiableList(new ArrayList<>(childCollectionProperties));
        this.parentReferenceProperties = unmodifiableList(new ArrayList<>(parentReferenceProperties));
        this.unwrapped = unwrapped;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  String getTypeName( ResultType this) {
        return typeName;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  List<SimpleTableFieldProperty> getSimpleTableFieldProperties( ResultType this) {
        return simpleTableFieldProperties;
    }

    /// Get nullable variants of the database fields.
    public  List<SimpleTableFieldProperty> getSimpleTableFieldPropertiesNullable( ResultType this) {
        return simpleTableFieldProperties.stream().map(SimpleTableFieldProperty::toNullable).collect(toList());
    }

    @org.checkerframework.dataflow.qual.Pure
    public  List<TableExpressionProperty> getTableExpressionProperties( ResultType this) {
        return tableExpressionProperties;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  List<ChildCollectionProperty> getChildCollectionProperties( ResultType this) {
        return childCollectionProperties;
    }

    /// Get nullable variants of the child collection fields.
    public  List<ChildCollectionProperty> getChildCollectionPropertiesNullable( ResultType this) {
        return childCollectionProperties.stream().map(ChildCollectionProperty::toNullable).collect(toList());
    }

    @org.checkerframework.dataflow.qual.Pure
    public  List<ParentReferenceProperty> getParentReferenceProperties( ResultType this) {
        return parentReferenceProperties;
    }

    /// Get nullable variants of the parent reference fields.
    public  List<ParentReferenceProperty> getParentReferencePropertiesNullable( ResultType this) {
        return parentReferenceProperties.stream().map(ParentReferenceProperty::toNullable).collect(toList());
    }

    @org.checkerframework.dataflow.qual.Pure
    public   boolean isUnwrapped( ResultType this) {
        return unwrapped;
    }

    public  ResultType withUnwrapped( ResultType this,   boolean unwrap) {
        if (unwrap == this.unwrapped)
            return this;
        else
            return new ResultType(typeName, simpleTableFieldProperties, tableExpressionProperties, childCollectionProperties, parentReferenceProperties, unwrap);
    }

    public  ResultType withTypeName(String newTypeName) {
        return new ResultType(newTypeName, simpleTableFieldProperties, tableExpressionProperties, childCollectionProperties, parentReferenceProperties, unwrapped);
    }

    @org.checkerframework.dataflow.qual.Pure
    public   int getFieldsCount( ResultType this) {
        return simpleTableFieldProperties.size() + tableExpressionProperties.size() + childCollectionProperties.size() + parentReferenceProperties.size();
    }

    @org.checkerframework.dataflow.qual.Pure
    public   boolean equalsIgnoringName( ResultType this,  ResultType that) {
        return simpleTableFieldProperties.equals(that.simpleTableFieldProperties) && tableExpressionProperties.equals(that.tableExpressionProperties) && childCollectionProperties.equals(that.childCollectionProperties) && parentReferenceProperties.equals(that.parentReferenceProperties) && unwrapped == that.unwrapped;
    }

    @org.checkerframework.dataflow.qual.Pure
    public   boolean equals( ResultType this,  Object o) {
        if (this == o)
            return true;
        if (o == null || getClass() != o.getClass())
            return false;
        ResultType that = (ResultType) o;
        return typeName.equals(that.typeName) && simpleTableFieldProperties.equals(that.simpleTableFieldProperties) && tableExpressionProperties.equals(that.tableExpressionProperties) && childCollectionProperties.equals(that.childCollectionProperties) && parentReferenceProperties.equals(that.parentReferenceProperties) && unwrapped == that.unwrapped;
    }

    @org.checkerframework.dataflow.qual.Pure
    public   int hashCode( ResultType this) {
        return Objects.hash(typeName, simpleTableFieldProperties, tableExpressionProperties, childCollectionProperties, parentReferenceProperties, unwrapped);
    }

    @org.checkerframework.dataflow.qual.Pure
    public  String toString( ResultType this) {
        return "ResultType{typeName='" + typeName + '\'' + ", simpleTableFieldProperties=" + simpleTableFieldProperties + ", tableExpressionProperties=" + tableExpressionProperties + ", childCollectionProperties=" + childCollectionProperties + ", parentReferenceProperties=" + parentReferenceProperties + ", unwrapped=" + unwrapped + '}';
    }
}
