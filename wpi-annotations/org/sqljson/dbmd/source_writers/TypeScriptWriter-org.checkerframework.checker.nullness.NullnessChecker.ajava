package org.sqljson.dbmd.source_writers;

import java.io.StringWriter;
import java.util.*;
import java.io.BufferedWriter;
import java.io.IOException;
import java.nio.file.Path;
import java.time.Instant;
import static java.util.stream.Collectors.groupingBy;
import org.checkerframework.checker.nullness.qual.Nullable;
import org.sqljson.dbmd.DatabaseMetadata;
import org.sqljson.dbmd.Field;
import org.sqljson.dbmd.RelId;
import org.sqljson.dbmd.RelMetadata;
import static org.sqljson.util.IO.newFileOrStdoutWriter;
import static org.sqljson.util.Nullables.*;
import static org.sqljson.util.StringFuns.indentLines;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public class TypeScriptWriter implements SourceCodeWriter {

    private final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.MonotonicNonNull Path srcOutputDir;

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.srcOutputDir" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    public TypeScriptWriter(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Path srcOutputDir) {
        this.srcOutputDir = srcOutputDir;
    }

    @org.checkerframework.framework.qual.RequiresQualifier(expression = { "this.srcOutputDir" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.srcOutputDir" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    private void writeCommonSourceFileHeader(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull BufferedWriter bw,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean includeTimestamp) throws IOException {
        bw.write("// ---------------------------------------------------------------------------\n");
        bw.write("// [ THIS SOURCE CODE WAS AUTO-GENERATED, ANY CHANGES MADE HERE MAY BE LOST. ]\n");
        if (includeTimestamp)
            bw.write("//   " + Instant.now().toString().replace('T', ' ') + "\n");
        bw.write("// ---------------------------------------------------------------------------\n");
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.srcOutputDir" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    public void writeRelationDefinitions(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull TypeScriptWriter this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull DatabaseMetadata dbmd,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean includeTimestamp) throws IOException {
        Path outputPath = getOutputFilePath();
        BufferedWriter bw = newFileOrStdoutWriter(outputPath);
        try {
            writeCommonSourceFileHeader(bw, includeTimestamp);
            writeRelationsModule(bw, dbmd);
        } finally {
            if (outputPath != null)
                bw.close();
            else
                bw.flush();
        }
    }

    @org.checkerframework.framework.qual.RequiresQualifier(expression = { "this.srcOutputDir" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.srcOutputDir" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    private void writeRelationsModule(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull BufferedWriter bw, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull DatabaseMetadata dbmd) throws IOException {
        Map<String, List<RelMetadata>> relMdsBySchema = dbmd.getRelationMetadatas().stream().collect(groupingBy(rmd -> valueOr(rmd.getRelationId().getSchema(), "DEFAULT")));
        for (String schema : relMdsBySchema.keySet()) {
            bw.write("export const " + schema + " = {\n");
            for (RelMetadata relMd : relMdsBySchema.get(schema)) {
                bw.write(indentLines(getRelationMetadataSource(relMd), 3));
                bw.write("\n");
            }
            // close schema object
            bw.write("};\n");
        }
    }

    @org.checkerframework.framework.qual.RequiresQualifier(expression = { "this.srcOutputDir" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.srcOutputDir" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String getRelationMetadataSource(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull RelMetadata relMd) {
        StringWriter sw = new StringWriter();
        RelId relId = relMd.getRelationId();
        sw.write("\"" + relId.getName() + "\": {\n");
        for (Field f : relMd.getFields()) {
            sw.write("   " + lit(f.getName()) + ": {");
            sw.write("\"type\": ");
            sw.write(lit(f.getDatabaseType()) + ", ");
            sw.write("\"len\": ");
            sw.write(f.getLength() + ", ");
            sw.write("\"prec\":");
            sw.write(f.getPrecision() + ", ");
            sw.write("\"scale\": ");
            sw.write(f.getFractionalDigits() + ", ");
            sw.write("\"null\": ");
            sw.write(f.getNullable() + ", ");
            sw.write("\"pkPart\": ");
            Integer pkPartNum = f.getPrimaryKeyPartNumber();
            sw.write(pkPartNum != null ? pkPartNum.toString() : "null");
            sw.write("},\n");
        }
        // close relation object
        sw.write("},\n");
        return sw.toString();
    }

    @org.checkerframework.framework.qual.RequiresQualifier(expression = { "this.srcOutputDir" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.srcOutputDir" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Path getOutputFilePath() {
        return applyIfPresent(srcOutputDir, d -> d.resolve("relations.ts"));
    }

    @org.checkerframework.framework.qual.RequiresQualifier(expression = { "this.srcOutputDir" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.srcOutputDir" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.SideEffectFree
    private static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String lit(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String s) {
        return "\"" + s.replace("\"", "\\\"") + "\"";
    }
}
