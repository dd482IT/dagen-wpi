package org.sqljson.dbmd;

import java.util.*;
import static java.util.Collections.emptyList;
import static java.util.Collections.unmodifiableList;
import static java.util.Objects.requireNonNull;
import static java.util.stream.Collectors.toList;
import org.checkerframework.checker.nullness.qual.Nullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public class RelMetadata {

    private final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull RelId relationId;

    private final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull RelType relationType;

    private final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull List<Field> fields;

    public enum RelType {

        Table, View, Unknown
    }

    public RelMetadata(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull RelId relationId, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull RelType relationType, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull List<Field> fields) {
        this.relationId = requireNonNull(relationId);
        this.relationType = requireNonNull(relationType);
        this.fields = unmodifiableList(new ArrayList<>(requireNonNull(fields)));
    }

    RelMetadata() {
        this.relationId = RelId.DUMMY_INSTANCE;
        this.relationType = RelType.Table;
        this.fields = emptyList();
    }

    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull RelId getRelationId() {
        return relationId;
    }

    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull RelType getRelationType() {
        return relationType;
    }

    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull List<Field> getFields() {
        return fields;
    }

    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull List<Field> getPrimaryKeyFields() {
        List<Field> pks = new ArrayList<>();
        for (Field f : fields) {
            if (f.getPrimaryKeyPartNumber() != null)
                pks.add(f);
        }
        pks.sort(Comparator.comparingInt(f -> {
            Integer pn = f.getPrimaryKeyPartNumber();
            return pn != null ? pn : 0;
        }));
        return pks;
    }

    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull List<String> getPrimaryKeyFieldNames() {
        return getPrimaryKeyFieldNames(null);
    }

    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull List<String> getPrimaryKeyFieldNames(@org.checkerframework.checker.initialization.qual.FBCBottom @org.checkerframework.checker.nullness.qual.Nullable String alias) {
        return getPrimaryKeyFields().stream().map(f -> alias != null ? alias + "." + f.getName() : f.getName()).collect(toList());
    }
}
