package org.sqljson.query_specs;

import java.util.*;
import static java.util.Collections.emptyList;
import static java.util.Collections.unmodifiableList;
import static java.util.Objects.requireNonNull;
import static java.util.stream.Collectors.toList;
import org.checkerframework.checker.nullness.qual.Nullable;
import com.fasterxml.jackson.annotation.JsonIgnore;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.KeyForSubchecker")
public final class TableJsonSpec {

    // possibly qualified
    private final  String table;

    private final  List<TableFieldExpr> fieldExpressions;

    private final  List<ParentSpec> parentTables;

    private final  List<ChildCollectionSpec> childTableCollections;

    private  RecordCondition recordCondition = null;

    TableJsonSpec() {
        this("", null, null, null, null);
    }

    public TableJsonSpec( String table, List<TableFieldExpr> fieldExpressions, List<ParentSpec> parentTables, List<ChildCollectionSpec> childTableCollections, RecordCondition recordCondition) {
        requireNonNull(table);
        this.table = table;
        this.fieldExpressions = fieldExpressions != null ? unmodifiableList(fieldExpressions) : null;
        this.parentTables = parentTables != null ? unmodifiableList(new ArrayList<>(parentTables)) : null;
        this.childTableCollections = childTableCollections != null ? unmodifiableList(new ArrayList<>(childTableCollections)) : null;
        this.recordCondition = recordCondition;
    }

    /// The table name, possibly schema-qualified, of this output specification.
    @org.checkerframework.dataflow.qual.Pure
    public  String getTable( TableJsonSpec this) {
        return table;
    }

    /// The output fields which originate from fields of this table.
    @org.checkerframework.dataflow.qual.Pure
    public  List<TableFieldExpr> getFieldExpressions( TableJsonSpec this) {
        return fieldExpressions;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  List<ParentSpec> getParentTables() {
        return parentTables;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  List<ChildCollectionSpec> getChildTableCollections( TableJsonSpec this) {
        return childTableCollections;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  RecordCondition getRecordCondition( TableJsonSpec this) {
        return recordCondition;
    }

    public  List<TableFieldExpr> getFieldExpressionsList( TableJsonSpec this) {
        return fieldExpressions != null ? fieldExpressions : emptyList();
    }

    public  List<ParentSpec> getParentTablesList( TableJsonSpec this) {
        return parentTables != null ? parentTables : emptyList();
    }

    public  List<ParentSpec> getReferencedParentTablesList( TableJsonSpec this) {
        return parentTables != null ? parentTables.stream().filter(t -> t.getReferenceName() != null).collect(toList()) : emptyList();
    }

    public  List<ParentSpec> getInlineParentTablesList( TableJsonSpec this) {
        return parentTables != null ? parentTables.stream().filter(t -> t.getReferenceName() == null).collect(toList()) : emptyList();
    }

    public  List<ChildCollectionSpec> getChildTableCollectionsList( TableJsonSpec this) {
        return childTableCollections != null ? childTableCollections : emptyList();
    }

    @org.checkerframework.dataflow.qual.Pure
    public   boolean hasCondition( TableJsonSpec this) {
        return recordCondition != null;
    }

    public   int getJsonPropertiesCount( TableJsonSpec this) {
        return (fieldExpressions != null ? fieldExpressions.size() : 0) + (childTableCollections != null ? childTableCollections.size() : 0) + getReferencedParentTablesList().size() + getInlineParentTablesList().stream().mapToInt(ip -> ip.getParentTableJsonSpec().getJsonPropertiesCount()).sum();
    }
}
