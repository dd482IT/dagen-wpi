package org.sqljson.result_types;

import java.util.ArrayList;
import java.util.List;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public class ResultTypeBuilder {

    private final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull List<SimpleTableFieldProperty> simpleTableFieldProperties;

    private final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull List<TableExpressionProperty> tableExpressionProperties;

    private final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull List<ChildCollectionProperty> childCollectionProperties;

    private final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull List<ParentReferenceProperty> parentReferenceProperties;

    // NOTE: Fields from any inline parents are included in the appropriate
    //       collections above according to their source in the parent itself.
    public ResultTypeBuilder() {
        this.simpleTableFieldProperties = new ArrayList<>();
        this.tableExpressionProperties = new ArrayList<>();
        this.childCollectionProperties = new ArrayList<>();
        this.parentReferenceProperties = new ArrayList<>();
    }

    public void addSimpleTableFieldProperties(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull List<SimpleTableFieldProperty> tfs) {
        simpleTableFieldProperties.addAll(tfs);
    }

    public void addTableExpressionProperties(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull List<TableExpressionProperty> tofs) {
        tableExpressionProperties.addAll(tofs);
    }

    public void addChildCollectionProperties(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull List<ChildCollectionProperty> fs) {
        childCollectionProperties.addAll(fs);
    }

    public void addParentReferenceProperties(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull List<ParentReferenceProperty> fs) {
        parentReferenceProperties.addAll(fs);
    }

    public void addAllFieldsFrom(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ResultType resultType,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean forceNullable) {
        if (!forceNullable) {
            addSimpleTableFieldProperties(resultType.getSimpleTableFieldProperties());
            addTableExpressionProperties(resultType.getTableExpressionProperties());
            addChildCollectionProperties(resultType.getChildCollectionProperties());
            addParentReferenceProperties(resultType.getParentReferenceProperties());
        } else {
            // Add nullable form of each field, as considered prior to any field
            // type overrides which are applied elsewhere (writing stage).
            // Expression fields are already nullable so need no transformation.
            addSimpleTableFieldProperties(resultType.getSimpleTableFieldPropertiesNullable());
            addTableExpressionProperties(resultType.getTableExpressionProperties());
            addChildCollectionProperties(resultType.getChildCollectionPropertiesNullable());
            addParentReferenceProperties(resultType.getParentReferencePropertiesNullable());
        }
    }

    public void addAllFieldsFrom(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ResultTypeBuilder resultTypeBuilder) {
        addSimpleTableFieldProperties(resultTypeBuilder.simpleTableFieldProperties);
        addTableExpressionProperties(resultTypeBuilder.tableExpressionProperties);
        addChildCollectionProperties(resultTypeBuilder.childCollectionProperties);
        addParentReferenceProperties(resultTypeBuilder.parentReferenceProperties);
    }

    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ResultType build(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String name) {
        return new ResultType(name, simpleTableFieldProperties, tableExpressionProperties, childCollectionProperties, parentReferenceProperties);
    }
}
