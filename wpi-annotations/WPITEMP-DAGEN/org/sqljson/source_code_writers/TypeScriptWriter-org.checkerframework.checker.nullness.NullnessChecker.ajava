package org.sqljson.source_code_writers;

import java.io.BufferedWriter;
import java.io.IOException;
import java.nio.file.Path;
import java.sql.Types;
import java.time.Instant;
import java.util.*;
import org.checkerframework.checker.nullness.qual.Nullable;
import org.sqljson.QueryReprSqlPath;
import org.sqljson.result_types.*;
import org.sqljson.util.IO;
import static org.sqljson.util.IO.writeString;
import static org.sqljson.util.Nullables.*;
import static org.sqljson.util.StringFuns.upperCamelCase;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public class TypeScriptWriter implements SourceCodeWriter {

    private final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Path srcOutputDir;

    private final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.MonotonicNonNull String filesHeader;

    private final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String sqlResourceNamePrefix;

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.filesHeader" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    public TypeScriptWriter(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Path srcOutputDir, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable String filesHeader, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String sqlResourceNamePrefix) {
        this.srcOutputDir = srcOutputDir;
        this.filesHeader = filesHeader;
        this.sqlResourceNamePrefix = sqlResourceNamePrefix;
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.filesHeader" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    public void writeQuerySourceCode(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull TypeScriptWriter this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String queryName, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull List<ResultType> resultTypes, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull List<String> paramNames, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull List<QueryReprSqlPath> sqlPaths, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String queryFileHeader,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean includeTimestamp) throws IOException {
        String moduleName = makeModuleName(queryName);
        Path outputPath = getOutputFilePath(moduleName);
        BufferedWriter bw = IO.newFileOrStdoutWriter(outputPath);
        try {
            writeCommonSourceFileHeader(bw, includeTimestamp);
            writeQueryModuleFileHeaders(bw, queryFileHeader);
            bw.write("\n\n");
            writeQueryModuleMembers(bw, resultTypes, paramNames, sqlPaths);
        } finally {
            if (outputPath != null)
                bw.close();
            else
                bw.flush();
        }
    }

    @org.checkerframework.framework.qual.RequiresQualifier(expression = { "this.filesHeader" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.filesHeader" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    private void writeCommonSourceFileHeader(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull BufferedWriter bw,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean includeTimestamp) throws IOException {
        bw.write("// ---------------------------------------------------------------------------\n");
        bw.write("// [ THIS SOURCE CODE WAS AUTO-GENERATED, ANY CHANGES MADE HERE MAY BE LOST. ]\n");
        if (includeTimestamp)
            bw.write("//   " + Instant.now().toString().replace('T', ' ') + "\n");
        bw.write("// ---------------------------------------------------------------------------\n");
    }

    @org.checkerframework.framework.qual.RequiresQualifier(expression = { "this.filesHeader" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.filesHeader" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    private void writeQueryModuleFileHeaders(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull BufferedWriter bw, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String queryFileHeader) throws IOException {
        // Write common header for query files if specified.
        if (filesHeader != null)
            bw.write(filesHeader + "\n");
        // Write any additional headers specified in the query.
        ifPresent(queryFileHeader, hdr -> writeString(bw, hdr + "\n"));
    }

    @org.checkerframework.framework.qual.RequiresQualifier(expression = { "this.filesHeader" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.filesHeader" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    private void writeQueryModuleMembers(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull BufferedWriter bw, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull List<ResultType> resultTypes, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull List<String> paramNames, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull List<QueryReprSqlPath> sqlPaths) throws IOException {
        writeQuerySqlFileReferenceMembers(bw, sqlPaths);
        writeParamMembers(paramNames, bw);
        if (!resultTypes.isEmpty()) {
            Set<String> writtenTypeNames = new HashSet<>();
            for (ResultType resultType : resultTypes) {
                if (!writtenTypeNames.contains(resultType.getTypeName()) && !resultType.isUnwrapped()) {
                    bw.write('\n');
                    bw.write(getTypeDeclaration(resultType));
                    writtenTypeNames.add(resultType.getTypeName());
                }
            }
        }
    }

    @org.checkerframework.framework.qual.RequiresQualifier(expression = { "this.filesHeader" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.filesHeader" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    private void writeQuerySqlFileReferenceMembers(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull BufferedWriter bw, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull List<QueryReprSqlPath> sqlPaths) throws IOException {
        // Write members holding resource/file names for the result representations that were written for this query.
        for (QueryReprSqlPath queryReprSqlPath : sqlPaths) {
            String memberName = sqlPaths.size() == 1 ? "sqlResource" : "sqlResource" + upperCamelCase(queryReprSqlPath.getResultRepr().toString());
            String resourceName = sqlResourceNamePrefix + queryReprSqlPath.getSqlPath().getFileName();
            bw.write("export const " + memberName + " = \"" + resourceName + "\";\n");
        }
        bw.write("\n");
    }

    @org.checkerframework.framework.qual.RequiresQualifier(expression = { "this.filesHeader" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.filesHeader" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    private void writeParamMembers(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull List<String> paramNames, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull BufferedWriter bw) throws IOException {
        for (String paramName : paramNames) {
            bw.write("export const ");
            bw.write(paramName);
            bw.write("Param");
            bw.write(" = '");
            bw.write(paramName);
            bw.write("';\n\n");
        }
    }

    @org.checkerframework.framework.qual.RequiresQualifier(expression = { "this.filesHeader" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.filesHeader" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String getTypeDeclaration(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ResultType genType) {
        StringBuilder sb = new StringBuilder();
        String typeName = genType.getTypeName();
        sb.append("export interface ");
        sb.append(typeName);
        sb.append("\n{\n");
        List<FieldInfo> fields = new ArrayList<>();
        genType.getSimpleTableFieldProperties().forEach(f -> fields.add(new FieldInfo(f.getName(), getTSTypeNameForSimpleTableField(f))));
        genType.getTableExpressionProperties().forEach(f -> fields.add(new FieldInfo(f.getName(), getTSTypeNameForTableExpressionProperty(f))));
        genType.getChildCollectionProperties().forEach(f -> fields.add(new FieldInfo(f.getName(), getChildCollectionDeclaredType(f))));
        genType.getParentReferenceProperties().forEach(f -> fields.add(new FieldInfo(f.getName(), getParentRefDeclaredType(f))));
        // field declarations
        for (FieldInfo f : fields) {
            sb.append("   ");
            sb.append(f.name);
            sb.append(": ");
            sb.append(f.typeDeclaration);
            sb.append(";\n");
        }
        sb.append("}\n");
        return sb.toString();
    }

    @org.checkerframework.framework.qual.RequiresQualifier(expression = { "this.filesHeader" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.filesHeader" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.SideEffectFree
    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String getTSTypeNameForSimpleTableField(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SimpleTableFieldProperty f) {
        boolean notNull = !valueOr(f.getNullable(), true);
        String typeOverride = f.getSpecifiedSourceCodeFieldType();
        if (typeOverride != null)
            return typeOverride;
        switch(f.getJdbcTypeCode()) {
            case Types.TINYINT:
            case Types.SMALLINT:
            case Types.INTEGER:
            case Types.BIGINT:
            case Types.DECIMAL:
            case Types.NUMERIC:
            case Types.FLOAT:
            case Types.REAL:
            case Types.DOUBLE:
                return notNull ? "number" : "number | null";
            case Types.CHAR:
            case Types.VARCHAR:
            case Types.LONGVARCHAR:
            case Types.CLOB:
            case Types.DATE:
            case Types.TIME:
            case Types.TIMESTAMP:
            case Types.TIMESTAMP_WITH_TIMEZONE:
                return notNull ? "string" : "string | null";
            case Types.BIT:
            case Types.BOOLEAN:
                return notNull ? "boolean" : "boolean | null";
            case Types.OTHER:
                if (f.getDatabaseType().toLowerCase().startsWith("json"))
                    return notNull ? "any" : "any | null";
                else
                    throw new RuntimeException("unsupported type for database field " + f);
            default:
                throw new RuntimeException("unsupported type for database field " + f);
        }
    }

    @org.checkerframework.framework.qual.RequiresQualifier(expression = { "this.filesHeader" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.filesHeader" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String getTSTypeNameForTableExpressionProperty(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull TableExpressionProperty f) {
        return valueOrThrow(f.getSpecifiedSourceCodeFieldType(), () -> new RuntimeException("Field type override is required for expression field " + f.getTableExpression()));
    }

    @org.checkerframework.framework.qual.RequiresQualifier(expression = { "this.filesHeader" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.filesHeader" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Pure
    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String getParentRefDeclaredType(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ParentReferenceProperty parentRefField) {
        return !parentRefField.isNullable() ? parentRefField.getGeneratedType().getTypeName() : parentRefField.getGeneratedType().getTypeName() + " | null";
    }

    @org.checkerframework.framework.qual.RequiresQualifier(expression = { "this.filesHeader" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.filesHeader" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String getChildCollectionDeclaredType(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ChildCollectionProperty childCollField) {
        ResultType genType = childCollField.getGeneratedType();
        String elType = !genType.isUnwrapped() ? genType.getTypeName() : getSoleFieldDeclaredType(genType);
        String bareChildCollType = elType + "[]";
        return !childCollField.isNullable() ? bareChildCollType : bareChildCollType + " | null";
    }

    @org.checkerframework.framework.qual.RequiresQualifier(expression = { "this.filesHeader" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.filesHeader" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String getSoleFieldDeclaredType(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ResultType genType) {
        if (genType.getFieldsCount() != 1)
            throw new RuntimeException("Expected single field when unwrapping " + genType.getTypeName() + ".");
        if (genType.getSimpleTableFieldProperties().size() == 1)
            return getTSTypeNameForSimpleTableField(genType.getSimpleTableFieldProperties().get(0));
        else if (genType.getTableExpressionProperties().size() == 1)
            return getTSTypeNameForTableExpressionProperty(genType.getTableExpressionProperties().get(0));
        else if (genType.getChildCollectionProperties().size() == 1)
            return getChildCollectionDeclaredType(genType.getChildCollectionProperties().get(0));
        else if (genType.getParentReferenceProperties().size() == 1)
            return getParentRefDeclaredType(genType.getParentReferenceProperties().get(0));
        throw new RuntimeException("Unhandled field category when unwrapping " + genType.getTypeName() + ".");
    }

    @org.checkerframework.framework.qual.RequiresQualifier(expression = { "this.filesHeader" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.filesHeader" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Path getOutputFilePath(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String moduleName) {
        return applyIfPresent(srcOutputDir, d -> d.resolve(moduleName + ".ts"));
    }

    @org.checkerframework.framework.qual.RequiresQualifier(expression = { "this.filesHeader" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.filesHeader" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.SideEffectFree
    private static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String makeModuleName(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String statementName) {
        return statementName.replace(' ', '-').toLowerCase();
    }
}
