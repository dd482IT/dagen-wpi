package org.sqljson.sql_dialects;

import java.util.List;
import org.checkerframework.checker.nullness.qual.Nullable;
import org.sqljson.dbmd.DatabaseMetadata;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public interface SqlDialect {

    enum DbmsType {

        PG, ORA, ISO
    }

    @org.checkerframework.dataflow.qual.Pure
    @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String getRowObjectExpression(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull List<String> columnNames, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String fromAlias);

    /// Select expression part of a simple aggregate objects query. This expression should be an aggregate function
    /// which builds an array of json objects from a source relation having the given column names and table alias.
    @org.checkerframework.dataflow.qual.Pure
    @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String getAggregatedRowObjectsExpression(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull List<String> columnNames, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable String orderBy, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String fromAlias);

    @org.checkerframework.dataflow.qual.Pure
    @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String getAggregatedColumnValuesExpression(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String columnName, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable String orderBy, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String fromAlias);

    static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SqlDialect fromDatabaseMetadata(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull DatabaseMetadata dbmd,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int indentSpaces) {
        DbmsType dbmsType = getDbmsType(dbmd.getDbmsName());
        switch(dbmsType) {
            case PG:
                return new PostgresDialect(indentSpaces);
            case ORA:
                return new OracleDialect(indentSpaces);
            default:
                throw new RuntimeException("dbms type " + dbmsType + " is currently not supported");
        }
    }

    @org.checkerframework.dataflow.qual.SideEffectFree
    static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull DbmsType getDbmsType(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String dbmsName) {
        String dbmsLower = dbmsName.toLowerCase();
        if (dbmsLower.contains("postgres"))
            return DbmsType.PG;
        else if (dbmsLower.contains("oracle"))
            return DbmsType.ORA;
        else
            return DbmsType.ISO;
    }
}
