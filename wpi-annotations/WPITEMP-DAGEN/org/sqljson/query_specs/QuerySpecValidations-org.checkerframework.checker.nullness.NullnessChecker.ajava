package org.sqljson.query_specs;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import static java.util.stream.Collectors.toList;
import static java.util.stream.Collectors.toSet;
import org.checkerframework.checker.nullness.qual.Nullable;
import org.sqljson.dbmd.DatabaseMetadata;
import org.sqljson.dbmd.Field;
import org.sqljson.dbmd.RelId;
import org.sqljson.dbmd.RelMetadata;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public final class QuerySpecValidations {

    public static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull RelId identifyTable(// as from input, possibly qualified
    @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String table, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable String defaultSchema, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull DatabaseMetadata dbmd, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SpecLocation specLocation) throws SpecError {
        RelMetadata relMd = dbmd.getRelationMetadata(dbmd.toRelId(table, defaultSchema));
        if (relMd == null)
            throw new SpecError(specLocation, "Table '" + table + "' was not found in database metadata.");
        return relMd.getRelationId();
    }

    public static void verifyTableFieldExpressionsValid(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull TableJsonSpec tableSpec, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable String defaultSchema, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull DatabaseMetadata dbmd, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SpecLocation specLoc) {
        if (tableSpec.getFieldExpressions() == null)
            return;
        var simpleSelectFields = new ArrayList<String>();
        var fieldExprs = tableSpec.getFieldExpressionsList();
        for (int ix = 0; ix < fieldExprs.size(); ++ix) {
            var fieldExpr = fieldExprs.get(ix);
            String field = fieldExpr.getField();
            String expr = fieldExpr.getExpression();
            if (expr != null && fieldExpr.getFieldTypeInGeneratedSource() == null)
                throw new SpecError(specLoc, "fieldExpressions entry #" + (ix + 1) + " is invalid: fieldTypeInGeneratedSource must be specified with the 'expression' property.");
            if ((field == null) == (expr == null))
                throw new SpecError(specLoc, "fieldExpressions entry #" + (ix + 1) + " is invalid: exactly one of 'field' or 'expression' properties must be provided.");
            if (field != null)
                simpleSelectFields.add(field);
        }
        RelMetadata relMd = dbmd.getRelationMetadata(dbmd.toRelId(tableSpec.getTable(), defaultSchema));
        if (relMd == null)
            throw new SpecError(specLoc, "Table '" + tableSpec.getTable() + "' was not found in database metadata.");
        verifyTableFieldsExist(relMd, simpleSelectFields, dbmd, specLoc);
    }

    public static void validateCustomJoinCondition(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull CustomJoinCondition customJoinCond, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull RelId childRelId, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull RelId parentRelId, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull DatabaseMetadata dbmd, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SpecLocation stmtLoc) throws SpecError {
        RelMetadata parentMd = dbmd.getRelationMetadata(parentRelId);
        RelMetadata childMd = dbmd.getRelationMetadata(childRelId);
        if (parentMd == null)
            throw new SpecError(stmtLoc.addPart("custom join condition"), "Parent table not found.");
        if (childMd == null)
            throw new SpecError(stmtLoc.addPart("custom join condition"), "Child table not found.");
        List<String> parentMatchFields = customJoinCond.getEquatedFields().stream().map(CustomJoinCondition.FieldPair::getParentPrimaryKeyField).collect(toList());
        verifyTableFieldsExist(parentMd, parentMatchFields, dbmd, stmtLoc);
        List<String> childMatchFields = customJoinCond.getEquatedFields().stream().map(CustomJoinCondition.FieldPair::getChildField).collect(toList());
        verifyTableFieldsExist(childMd, childMatchFields, dbmd, stmtLoc);
    }

    private static void verifyTableFieldsExist(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull RelMetadata relMd, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull List<String> fieldNames, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull DatabaseMetadata dbmd, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SpecLocation specLocation) throws SpecError {
        Set<String> dbmdTableFields = relMd.getFields().stream().map(Field::getName).collect(toSet());
        List<String> missingFields = fieldNames.stream().filter(fieldName -> !dbmdTableFields.contains(dbmd.normalizeName(fieldName))).collect(toList());
        if (!missingFields.isEmpty())
            throw new SpecError(specLocation, "Field(s) not found in table " + relMd.getRelationId() + ": " + missingFields + ".");
    }

    @org.checkerframework.dataflow.qual.SideEffectFree
    private QuerySpecValidations() {
    }
}
