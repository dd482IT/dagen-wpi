package org.sqljson.util;

import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;
import org.checkerframework.checker.nullness.qual.Nullable;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public final class Nullables {

    public static <T, U> @org.checkerframework.checker.nullness.qual.Nullable U applyIfPresent(T t, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Function<T, U> f) {
        return t == null ? null : f.apply(t);
    }

    public static <T, U> U applyOr(T t, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Function<T, U> f, U defaultVal) {
        return t == null ? defaultVal : f.apply(t);
    }

    public static <T> void ifPresent(T t, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Consumer<T> f) {
        if (t != null)
            f.accept(t);
    }

    @org.checkerframework.dataflow.qual.Pure
    public static <T> T valueOr(T t, T defaultVal) {
        return t != null ? t : defaultVal;
    }

    public static <T> T valueOrGet(T t, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Supplier<T> defaultValFn) {
        return t != null ? t : defaultValFn.get();
    }

    public static <T> @org.checkerframework.checker.nullness.qual.NonNull T valueOrThrow(T t, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Supplier<? extends RuntimeException> errFn) {
        if (t != null)
            return t;
        else
            throw errFn.get();
    }

    @org.checkerframework.dataflow.qual.SideEffectFree
    private Nullables() {
    }
}
