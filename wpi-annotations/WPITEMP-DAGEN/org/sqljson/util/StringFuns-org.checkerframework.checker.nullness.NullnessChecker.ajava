package org.sqljson.util;

import java.nio.file.Path;
import java.util.Set;
import java.util.regex.Pattern;
import org.checkerframework.checker.nullness.qual.Nullable;
import static java.util.Locale.ENGLISH;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public final class StringFuns {

    private static final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String SPACES = "                                                                              ";

    @org.checkerframework.dataflow.qual.Pure
    public static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String makeNameNotInSet(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String baseName, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Set<String> existingNames) {
        return makeNameNotInSet(baseName, existingNames, "");
    }

    @org.checkerframework.dataflow.qual.Pure
    public static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String makeNameNotInSet(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String baseName, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Set<String> existingNames, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String suffixSep) {
        if (!existingNames.contains(baseName))
            return baseName;
        else {
            int i = 1;
            while (existingNames.contains(baseName + suffixSep + i)) ++i;
            return baseName + suffixSep + i;
        }
    }

    public static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String lowercaseInitials(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String name, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String sep) {
        StringBuilder sb = new StringBuilder();
        for (String word : name.split(sep)) {
            if (word.length() > 0)
                sb.append(Character.toLowerCase(word.charAt(0)));
        }
        return sb.toString();
    }

    /// Return camel-case form of the given string, where words separated by
    /// '_', ' ', or '-' characters are combined and the initial letter of the
    /// returned name is capitalized.
    public static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String upperCamelCase(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String name) {
        StringBuilder res = new StringBuilder();
        for (String word : name.split("[_ -]")) {
            res.append(Character.toUpperCase(word.charAt(0)));
            res.append(word.substring(1).toLowerCase());
        }
        return res.toString();
    }

    public static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String lowerCamelCase(String name) {
        StringBuilder res = new StringBuilder();
        for (String word : name.split("[_ -]")) {
            if (res.length() == 0)
                res.append(word.toLowerCase());
            else {
                res.append(Character.toUpperCase(word.charAt(0)));
                res.append(word.substring(1).toLowerCase());
            }
        }
        return res.toString();
    }

    @org.checkerframework.dataflow.qual.SideEffectFree
    public static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String capitalize(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String name) {
        if (name.isEmpty())
            return name;
        else
            return name.substring(0, 1).toUpperCase(ENGLISH) + name.substring(1);
    }

    public static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String indentLines(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String linesStr,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int spacesCount) {
        return indentLines(linesStr, spacesCount, true);
    }

    public static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String indentLines(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String linesStr,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int spacesCount,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean indentFirstLine) {
        StringBuilder sb = new StringBuilder();
        CharSequence indention = SPACES.subSequence(0, Math.min(spacesCount, SPACES.length()));
        boolean pastFirst = false;
        for (String line : linesStr.split("\n")) {
            if (pastFirst)
                sb.append('\n');
            if (pastFirst || indentFirstLine)
                sb.append(indention);
            sb.append(line);
            if (!pastFirst)
                pastFirst = true;
        }
        return sb.toString();
    }

    @org.checkerframework.dataflow.qual.SideEffectFree
    public static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String unDoubleQuote(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String s) {
        if (s.startsWith("\"") && s.endsWith("\""))
            return s.substring(1, s.length() - 1);
        return s;
    }

    public static  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean matches(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Pattern pat, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String s) {
        return pat != null && pat.matcher(s).matches();
    }

    @org.checkerframework.dataflow.qual.SideEffectFree
    public static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String fileExtension(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Path filePath) {
        String fileName = filePath.getFileName().toString();
        int dotIx = fileName.lastIndexOf('.');
        if (dotIx == -1)
            return "";
        else
            return fileName.substring(dotIx + 1);
    }

    @org.checkerframework.dataflow.qual.SideEffectFree
    private StringFuns() {
    }
}
